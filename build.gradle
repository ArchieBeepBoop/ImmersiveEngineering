import groovy.json.JsonOutput
import groovy.json.JsonSlurper

// TODO reimplement custom build features (changelog, shadow, signing, what else?)
plugins {
    id 'dev.architectury.loom' version '0.7.2-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = 'ImmersiveEngineering'
version = buildVersionString()
group = 'blusunrize.immersiveengineering'

sourceSets {
    manual {
        compileClasspath = main.compileClasspath
    }
    api {
        compileClasspath = main.compileClasspath
        compileClasspath += manual.output
        runtimeClasspath += manual.output
    }
    main {
        //resources {
        //    srcDirs = [
        //            //"$rootDir/src/main/resources",
        //            "$rootDir/src/generated/resources"
        //    ]
        //}
        compileClasspath += manual.output + api.output
        runtimeClasspath += manual.output + api.output
    }
    datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
    test {
        compileClasspath += manual.output + api.output
        runtimeClasspath += manual.output + api.output
    }
}

loom {
    silentMojangMappingsLicense()

    mixinConfigs = [
            //TODO constant, and fix silly cast errors
            "immersiveengineering.mixins.json"
    ]

    dataGen {
        mod project.modid
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

repositories {
	maven { // TOP (The one probe)
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // JEI & Tinkers
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // BlockModelSplitter
        name 'Jared maven'
        url 'https://maven.blamejared.com/'
    }
    //Curseforge maven, in case some other maven goes offline and for mods that don't have a maven
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven { // CC-Tweaked
        url 'https://squiddev.cc/maven/'
    }
    maven { //Curious
        url "https://maven.theillusivec4.top/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.version_minecraft}"
    //TODO remap mappings minecraft.officialMojangMappings()
    mappings "de.oceanlabs.mcp:mcp_snapshot:20210309-1.16.5"
    forge "net.minecraftforge:forge:${project.version_minecraft}-${project.version_forge}"
    modCompileOnly "mezz.jei:jei-1.16.5:7.6.1.75:api"
    modCompileOnly "org.squiddev:cc-tweaked-1.16.4:1.94.0"
    modCompileOnly "mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.+"
    modCompileOnly "top.theillusivec4.curios:curios-forge:1.16.5-4.0.4.0:api"
    modCompileOnly group: "com.blamejared.crafttweaker", name: "CraftTweaker-1.16.5", version: "7.1.0.245"

    testImplementation('junit:junit:4.13')
    compile "malte0811:BlockModelSplitter:1.2.0"
}

def version_replaces = [
        'version': project.version,
        'mc_version': version_minecraft,
        'forge_version': version_forge
]

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    filesMatching("META-INF/mods.toml") {
        expand version_replaces
    }
    //TODO Minify json resources
    //doLast {
    //    fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
    //        File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file, 'UTF-8')))
    //    }
    //}
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

String buildVersionString() {
    String ie_output_version = "${version_ie}-${version_buildnumber}"
    boolean jenkins_build = System.getenv("ie_add_git_rev") != null
    if (jenkins_build) {
        File changelog = new File("changelog.md")
        if (!changelog.exists()) {
            // Get the current minor/patch number and bump it
            int idx = version_ie.lastIndexOf(".")
            String major = version_ie.substring(0, idx)
            String minor = version_ie.substring(idx + 1)
            int bumped = minor.toInteger() + 1
            ie_output_version = "${major}.${bumped}-pre"
        } else {
            // If the changelog file is present, we use the first line from that
            String first_line = changelog.readLines().get(0)
            ie_output_version = first_line.substring(first_line.indexOf("-") + 1)
        }
        // Now use describe to get the number of commits since the last tag
        exec {
            commandLine 'git', 'fetch', '-t'
        }
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--long', '--abbrev=8', 'HEAD'
            standardOutput = stdout
        }
        String descr = stdout.toString().trim()
        descr = descr.substring(0, descr.length() - 10)
        int idx = descr.lastIndexOf("-")
        int pre_version = descr.substring(idx + 1).toInteger()
        // If there have been more than 0 commits, consider this a pre-build
        // otherwise use normal versioning (so a Jenkins build on the tag is equal to a release)
        if (pre_version > 0)
            ie_output_version = "${ie_output_version}.${pre_version}"
    }
    return "${version_minecraft}-${ie_output_version}"
}
